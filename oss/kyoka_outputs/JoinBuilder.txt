# 鏡花観点表（JoinBuilderテスト版・初期案）

## 1. 網羅性（Coverage）
- [ ] 主要なJoin種別（Inner, Left, Outer, Right）のすべてをカバーしているか
- [ ] 単一キー／複合キーJoin（複数条件）のテストが存在するか
- [ ] ネストJoin／多段Joinのパターンも含まれているか
- [ ] エンティティ型／匿名型の投影（Select）の違いが検証されているか
- [ ] サポート外・未実装パターンのテストが含まれているか

## 2. 境界値・異常系
- [ ] Join条件がnull、空、型不整合など“壊れた”入力時のテストがあるか
- [ ] サポート外のJoin式（複雑なON句、自己結合、部分式など）に対する動作確認
- [ ] エラー時の戻り値や例外メッセージの一貫性
- [ ] 設計上“例外的”な使い方（例：Select句未指定、パラメータ省略）への耐性

## 3. 設計哲学・一貫性
- [ ] KSQL側で許容されない構文やパターンを検知・明示しているか
- [ ] .NET LINQ→KSQL変換ロジックが「誤変換」しないかを監視できているか
- [ ] エラー時・未対応時のレスポンス設計（例：UNSUPPORTED JOIN等）が全テストで一貫しているか
- [ ] 他Builder（GroupBy, Having, Window等）とテスト戦略が統一されているか

## 4. 将来拡張性・保守性
- [ ] 今後Join種別や拡張要件追加時にテストパターンが追加容易か
- [ ] サポート対象外を“意図的に”残す（skip, コメント）設計になっているか
- [ ] OSSユーザーや他AIに「現状のテスト意図」が説明できるドキュメント化が進んでいるか

## 5. 運用・品質担保
- [ ] テストケース名・内容が十分にドメイン表現的で分かりやすいか
- [ ] コードカバレッジレポートとのギャップが定期的にレビューされているか
- [ ] 実装・テスト・レビューが“担当者分離”されているか（AI運用の三権分立）

---

### 鏡花コメント例（レビュー実行時のサンプル）

- 複数キーJoinのテストが抜けているため、ビルダーの誤動作リスクあり
- 異常系はカバーされているが、“部分式Join”など実運用で頻出する複雑系が網羅不足
- エラー時のメッセージ設計がBuilder間で揃っていないため、ユーザー混乱リスク
- OSS外部ユーザー向けのテスト意図ドキュメントが不足。保守コスト上昇が懸念

