「RocksDBストア設計およびマルチWindow・キャッシュ設定対応」実装依頼

概要
KsqlDslのエンティティストアとしてRocksDBを利用し、
Kafka Streams準拠のKTableキャッシュとして機能させる設計を実装してください。
マルチWindow・容量管理・キャッシュON/OFF・命名規則など運用現場を意識した仕様とします。

要件詳細
基本機能

POCOエンティティごとにRocksDBストア（StateStore）を生成

1つのPOCOに対し複数のWindow（例：1, 5, 15, 60, 240分足）を設定可能

設定ファイルWindows配列で複数ストア自動生成

命名規則

デフォルト命名：{Entity名}_{Window値}min_Store

例：TradeLogCandle_5min_Store

物理ファイル・ディレクトリ名は小文字・アンダースコア形式で自動生成（例：tradelogcandle_5min_store）

StoreName指定時は個別上書き可能

キャッシュ管理

EnableCacheでON/OFF切り替え

ON時はローカルファイルシステム（RocksDB）に蓄積される（容量無制限。注意文言必須）

OFF時はインメモリ等、揮発性ストア

物理ファイル名・ストア名

利用者がKafka/RocksDBの詳細知識なしで運用できる命名・自動生成

明示指定がなければ自動命名・内部管理

容量上限・データ削除

RocksDBはデフォルト無制限。古いデータ削除・TTL等はOSS側で追加実装できる設計を維持（当面実装不要）

設定例・ドキュメント準拠

json
コピーする
編集する
"Entities": [
  {
    "Entity": "TradeLogCandle",
    "SourceTopic": "trade-raw",
    "Windows": [1, 5, 15, 60, 240],
    "StoreType": "RocksDb",
    "EnableCache": true
  }
]
ドキュメント docs_advanced_rules.md 4.1, 4.2、docs_configuration_reference.md を設計指針とする

運用・拡張性配慮

topic:partitionは利用者が意識不要、offsetは無視

複数Window/複数エンティティ対応、Store追加・削除時の自動生成/削除

利用者にとって「Entity名＋Window」で一貫したストアアクセスが可能となること

テスト要件
設定ファイルの変更でWindowやキャッシュ有無を切り替えた際に、
ストアが自動的に正しい命名・構成で生成/削除されること

キャッシュON時にローカルFSへ保存され、OFF時は保存されないこと

利用者がストア名や物理名を明示指定しなくても、想定通りの命名で動作すること

実装時の注意
なるべく設定ファイルの項目増加を避け、シンプルな運用を重視すること

ドキュメントと差異が生じた場合は必ずレビュー申請を行うこと

